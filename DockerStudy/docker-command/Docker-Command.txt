to avoid use sudo to run docker command ,create a user groud docker and add the normal user to this group.


in the dockerfile , FROM to get the docker image .run will start a temprary container to run this image .

the command after RUN will run in the container .
CMD also run in the container.


docker tag mytomcat jackyohhub/mytomcat


apt-get autoremove openjdk-7-jre  --purge
apt-get autoremove openjdk-7-jre-headless --purge 
apt-get install python-software-properties
apt-get install software-properties-common
add-apt-repository ppa:webupd8team/java
apt-get update
apt-get install oracle-java8-installer

练习测试


jeff@ubuntu:~$ docker run -dit ubuntu16.04 bash
d7c57195ef8f283f662df524b884c90292640f7514978f225b1612b30800da46
jeff@ubuntu:~$ 


-dit means :
  -d, --detach                                Run container in background and print container ID
  -i, --interactive                           Keep STDIN open even if not attached
  -t, --tty                                   Allocate a pseudo-TTY

docker ps -a  display exit
docker容器的主线程（dockfile中CMD执行的命令）结束，容器会退出
docker run -dit [CONTAINER_NAME or CONTAINER_ID]
docker ps -a
docker attach [CONTAINER_NAME or CONTAINER_ID]
docker exec -it [CONTAINER_NAME or CONTAINER_ID] /bin/bash

docker run -dit -P --name contain_name -v /home/jeff/dockerstudy/data-volumn:/user-data  ubuntu15.04-changed
-p open port .
contain_name is the contain_name ,you can change to other one.
-v means data volumn mapping 


docker run -d -P --volume-driver=flocker  -v my-named-volume:/webapp  --name contain_name ubuntu15.04-changed


cat <<EOF > /tmp/apt-pref
Package: *
Pin: origin clusterhq-archive.s3.amazonaws.com
Pin-Priority: 700
EOF

use cat to crate a file , and use EOF to tell the system the edit finish .

---1. create data volumn ccontainer.
docker run -dit --name dataContainer -v $PWD/DockerData/ShareData:/user-data ubuntu bash
docker run -dit --name server-A --volumes-from dataContainer ubuntu bash
docker run -dit --name server-B --volumes-from dataContainer ubuntu bash

docker network inspect bridge

docker run -dit --name mysqlserver mysql bash

docker cp MySqlServer:/etc/mysql/my.cnf /home/jeff
--copy a file from docker container .
--------------------------------------------------------------------MySql----------------------------------
docker run -dit -p 3306:3306 --name mysql-server \
-v /home/jeff/DockerData/DBData/mysql:/var/lib/mysql \
-v /home/jeff/DockerData/DBData/my.cnf:/etc/mysql/my.cnf \
-v /home/jeff/DockerData/DBData/container-log/:/var/log/ \
-e MYSQL_ROOT_PASSWORD=root \
-e MYSQL_DATABASE=HSBCDB \
-e MYSQL_USER=EXIMTRX \
-e MYSQL_PASSWORD=EXIMTRX  \
mysql
---------------------------------------------------------------------------------------------
docker run -dit -p 3306:3306 --name mysql-server \
-v /home/jeff/DockerData/DBData/mysql:/var/lib/mysql \
-e MYSQL_ROOT_PASSWORD=root \
-e MYSQL_DATABASE=HSBCDB \
-e MYSQL_USER=EXIMTRX \
-e MYSQL_PASSWORD=EXIMTRX  \
mysql






# please do not put bash in the above command.

docker exec -it mysql-server  bash
命令说明：
-p 3306:3306：将容器的3306端口映射到主机的3306端口
-v $PWD/DockerData/DBData/logs:/mysql_logs：将主机当前目录下的/DockerData/DBData/logs挂载到容器的/mysql_logs
-v $PWD/DockerData/DBData/mysql.cfg:/etc/mysql/mysql.config：将主机当前目录下的PWD/DockerData/DBData/mysql.cfg目录挂载到容器的//etc/mysql/mysql.config
-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码 

-------------------------------------------------------------Jboss Wildfly 10 ---------------------------------------
docker run -dit --name jboss-server-1  \
-v /home/jeff/DockerData/APServerData/wildfly10.1:/opt/jboss/wildfly \
-v /home/jeff/DockerData/APServerData/wildfly-deployments:/opt/jboss/wildfly/standalone/deployments \
-v /home/jeff/DockerData/APServerData/server-log:/opt/jboss/wildfly/standalone/log \
-p 6080:8080 \
-p 7990:9990 \
jboss/wildfly


docker run -dit --name jboss-server-2  \
-v /home/jeff/DockerData/APServerData/wildfly10.1:/opt/jboss/wildfly \
-v /home/jeff/DockerData/APServerData/wildfly-deployments:/opt/jboss/wildfly/standalone/deployments \
-v /home/jeff/DockerData/APServerData/server-log:/opt/jboss/wildfly/standalone/log \
-p 6081:8080 \
-p 7991:9990 \
jboss/wildfly

------------------------------------------------------------------------------------------------------------------------

docker run -dit --name jeff-server  \
-v /home/jeff/DockerData/jboss/map-deployments/:/opt/jboss/wildfly/standalone/deployments/ \
-v /home/jeff/DockerData/jboss/map-log:/opt/jboss/wildfly/standalone/log \
-p 6081:8080 \
-p 7991:9990 \
jeff/wildfly


docker run -dit --name jeff-server  \
-p 6081:8080 \
-p 7991:9990 \
jeff/wildfly


/home/jeff/DockerData/jboss
Web Console: http://192.168.16.128:6080/  http://localhost:6080/

docker run -dit --privileged  -p 1344:1344 --name icap-server drwebapp/squid-icap

drwebapp/squid-icap 
docker run -dit -v /home/data/docker/docker/icap/var/log:/var/log  --privileged  -p 1344:1344 --name icap-server drwebapp/squid-icap
docker run -dit 
--entrypoint="/usr/sbin/nginx"  -p 1344:1344  -e DRWEB_ICAP_IP=10.39.104.38 -e DRWEB_ICAP_PORT=1344  drwebapp/squid-icap-v2 
docker run -dit  mgit/squidclamav



http://mvnrepository.com/
